diff --git a/server/src/services/cli.service.ts b/server/src/services/cli.service.ts
index 674b885dc..8c0620bd5 100644
--- a/server/src/services/cli.service.ts
+++ b/server/src/services/cli.service.ts
@@ -2,6 +2,7 @@ import { Injectable } from '@nestjs/common';
 import { isAbsolute } from 'node:path';
 import { SALT_ROUNDS } from 'src/constants';
 import { UserAdminResponseDto, mapUserAdmin } from 'src/dtos/user.dto';
+import { Permission } from 'src/enum';
 import { BaseService } from 'src/services/base.service';
 
 @Injectable()
@@ -125,6 +126,64 @@ export class CliService extends BaseService {
     return true;
   }
 
+  async createAdminApiKey(
+    keyName: string = 'Admin CLI Key',
+    permissionsString: string = '',
+    useAllPermissions: boolean = false,
+    userEmail?: string,
+    userId?: string,
+    checkExisting: boolean = false,
+  ): Promise<{ secret: string; apiKey: any } | { existing: true }> {
+    let targetUser;
+
+    if (userEmail) {
+      targetUser = await this.userRepository.getByEmail(userEmail);
+      if (!targetUser) {
+        throw new Error(`User with email '${userEmail}' not found`);
+      }
+    } else if (userId) {
+      targetUser = await this.userRepository.get(userId, {});
+      if (!targetUser) {
+        throw new Error(`User with ID '${userId}' not found`);
+      }
+    } else {
+      const admin = await this.userRepository.getAdmin();
+      if (!admin) {
+        throw new Error('No admin user found');
+      }
+      targetUser = admin;
+    }
+
+    // If check is enabled, look for existing key with same name
+    if (checkExisting) {
+      const existingKeys = await this.apiKeyRepository.getByUserId(targetUser.id);
+      const existingKey = existingKeys.find(key => key.name === keyName);
+      if (existingKey) {
+        return { existing: true };
+      }
+    }
+
+    let permissions: Permission[] = [];
+    if (useAllPermissions) {
+      permissions = [Permission.All];
+    } else if (permissionsString.trim()) {
+      const permissionStrings = permissionsString.split(',').map(p => p.trim()).filter(p => p);
+      permissions = permissionStrings.map(p => p as Permission);
+    }
+
+    const secret = this.cryptoRepository.randomBytesAsText(32);
+    const hashedSecret = this.cryptoRepository.hashSha256(secret);
+
+    const apiKey = await this.apiKeyRepository.create({
+      name: keyName,
+      key: hashedSecret,
+      userId: targetUser.id,
+      permissions,
+    });
+
+    return { secret, apiKey };
+  }
+
   cleanup() {
     return this.databaseRepository.shutdown();
   }
