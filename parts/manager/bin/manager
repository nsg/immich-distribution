#!/bin/bash
set -eu -o pipefail

. $SNAP/bin/load-env
. $SNAP/etc/manager.conf

send_system_notification() {
    local title="$1"
    local description="$2"
    
    local notification_hash=$(echo -n "$title$description" | sha256sum | cut -d' ' -f1)
    local sent_hash=$(snapctl get sent-notification-hash)
    
    if [ "$sent_hash" = "$notification_hash" ]; then
        return 0
    fi
    
    if $SNAP/bin/notification -t "$title" -T "SystemMessage" -l "info" -D "$description"; then
        snapctl set sent-notification-hash="$notification_hash"
        return 0
    else
        echo "Failed to send system notification: $title" >&2
        return 1
    fi
}

create_api_key() {
    if API_KEY_OUTPUT=$($SNAP/bin/immich-admin create-api-key --name "immich-distribution" --check); then
        if [[ ${#API_KEY_OUTPUT} -gt 30 ]]; then
            snapctl set admin-api-key="$API_KEY_OUTPUT"
        fi
    else
        echo "Failed to create/check API key" >&2
    fi
}

check_database_migration_needed() {
    local media_path_prefix="$1"
    query_db -Atq <<< "
        select exists (
            select 1 from (
                select \"originalPath\" as p from asset where \"originalPath\" like '${media_path_prefix}%'
                union all select \"sidecarPath\" from asset where coalesce(\"sidecarPath\",'') like '${media_path_prefix}%'
                union all select \"encodedVideoPath\" from asset where coalesce(\"encodedVideoPath\",'') like '${media_path_prefix}%'
                union all select \"path\" from asset_file where \"path\" like '${media_path_prefix}%'
                union all select \"profileImagePath\" from \"user\" where coalesce(\"profileImagePath\",'') like '${media_path_prefix}%'
                union all select \"thumbnailPath\" from person where coalesce(\"thumbnailPath\",'') like '${media_path_prefix}%'
            ) s limit 1
        );
    " | grep -q t
}

migrate_database_media_paths() {
    # Check and migrate legacy media paths
    for from_path in \
        "/var/snap/immich-distribution/common/data" \
        "/usr/src/app/upload" \
        "/data" \
        "upload"
    do
        if check_database_migration_needed "$from_path"; then
            echo "Migrating media paths from $from_path to $IMMICH_MEDIA_LOCATION"
            printf '%s\n%s\ny\n' "$from_path" "$IMMICH_MEDIA_LOCATION" \
                | $SNAP/bin/immich-admin change-media-location || true
        fi
    done
}

# Check if this is a bootstrap run (wait for server and create API key once)
if [[ "${1:-}" == "bootstrap" ]]; then
    echo "Bootstrap: Waiting for Immich server to be ready..."
    
    # Wait up to 10 minutes for the server to be ready
    for i in {1..120}; do
        if immich_server_ready; then
            echo "Bootstrap: Creating admin API key..."
            create_api_key
            echo "Bootstrap: Checking for media path migration..."
            migrate_database_media_paths
            exit 0
        fi
        echo "Bootstrap: Waiting for server... (attempt $i/120)"
        sleep 5
    done
    
    echo "Bootstrap: Timeout waiting for Immich server to be ready" >&2
    exit 1
fi

# Check API key twice a day (at 06 and 18), the minute depends on the timer.
# I regularly check this in case the user deletes the API key. This key will
# be critical for the operation of the snap.
CURRENT_HOUR=$(date +%H)
if [[ "$CURRENT_HOUR" == "06" || "$CURRENT_HOUR" == "18" ]]; then
    create_api_key
fi

# Send a system notifications to the user
send_system_notification "$NOTIFICATION_TITLE" "$NOTIFICATION_DESCRIPTION"
