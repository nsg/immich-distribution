#!/bin/bash

set -o pipefail

. $SNAP/bin/load-env

export PGDATA="$SNAP_COMMON/pgsql/data"

TIME="$(date +%FT%H%M%S)"

usage() {
    echo "$0 [-d [-n <name>]] [-a] [-l]"
    echo
    echo -e "-d\tBackup database (uses custom name if provided by a preceding -n option)."
    echo -e "-a\tBackup assets (images, videos, ...)"
    echo -e "-l\tList backups"
    echo -e "-n <name>\tSpecify a custom name for the database backup (used by -d option)."
    echo
    echo "The recommended way to backup Immich is to do a" \
         "database backup, and then manually backup the" \
         "assets directly from $SNAP_COMMON/upload"
    exit 1
}

clean_up_daily_backups() {
    find $SNAP_COMMON/backups -name "immich_database_daily_*.sql.xz" -type f -mtime +8 -delete
}

backup_database() {
    local backup_mode="$1" # "daily" or "manual"
    local custom_filename_part="$2" # custom name string, or empty

    local base_prefix="immich_database"
    local file_suffix=".sql.xz"
    local filename_middle_part

    if [ "$backup_mode" == "daily" ]; then
        # Daily backups always use SNAP_VERSION and TIME, ignore custom_filename_part
        filename_middle_part="daily_${SNAP_VERSION}_${TIME}"
    else # "manual" mode
        if [ -n "$custom_filename_part" ]; then
            # Manual backup with a custom name part
            filename_middle_part="${SNAP_VERSION}_${custom_filename_part}"
        else
            # Manual backup with default (timestamp-based) name part
            filename_middle_part="${SNAP_VERSION}_${TIME}"
        fi
    fi

    local backup_db_file="$SNAP_COMMON/backups/${base_prefix}_${filename_middle_part}${file_suffix}"

    echo "Creating database backup: $backup_db_file"
    cd "$SNAP_COMMON/backups"
    if ! drop_privileges $SNAP/usr/local/pgsql/bin/pg_dumpall -U postgres --clean --if-exists | xz > "$backup_db_file"; then
        echo "Failed to execute pg_dumpall or xz."
        rm -f "$backup_db_file"
        exit 1
    fi

    if [ ! -s "$backup_db_file" ]; then
        echo "Failed to create database backup or backup file is empty: $backup_db_file"
        exit 1
    fi

    if ! xzgrep -q -- "-- PostgreSQL database dump complete" "$backup_db_file"; then
        echo "Database dump incomplete: '-- PostgreSQL database dump complete' not found in $backup_db_file."
        rm -f "$backup_db_file"
        exit 1
    fi

    if ! xzgrep -q -- "-- PostgreSQL database cluster dump complete" "$backup_db_file"; then
        echo "Database dump incomplete: '-- PostgreSQL database cluster dump complete' not found in $backup_db_file."
        rm -f "$backup_db_file"
        exit 1
    fi

    echo "Database backup successful and validated: $backup_db_file"
}

backup_assets() {
    local backup_as_file="$SNAP_COMMON/backups/immich_assets_${SNAP_VERSION}_${TIME}.tar.xz"

    echo "Creating assets backup: $backup_as_file"
    tar cJf "$backup_as_file" $SNAP_COMMON/upload
}

list_backups() {
    echo "Database backups:"
    database_backup_files=$(ls -lh $SNAP_COMMON/backups/immich_database_*.sql.xz 2>/dev/null)
    if [ -z "$database_backup_files" ]; then
        echo "No database backups found"
    else
        echo "$database_backup_files"
    fi

    echo
    echo "Assets backups:"
    assets_backup_files=$(ls -lh $SNAP_COMMON/backups/immich_assets_*.tar.xz 2>/dev/null)
    if [ -z "$assets_backup_files" ]; then
        echo "No assets backups found"
    else
        echo "$assets_backup_files"
    fi

    echo
    echo "To restore a backup, use the following commands:"
    echo "immich-distribution.restore -d <database_backup>"
    echo "immich-distribution.restore -a <assets_backup>"
}

root_check

[ -z $1 ] && usage

CUSTOM_DB_NAME="" # Initialize custom database name variable

while getopts dahlsn: option; do # Added n: to handle argument for -n
    case "$option" in
        d) 
            backup_database "manual" "$CUSTOM_DB_NAME"
            ;;
        a)
            backup_assets
            ;;
        l)
            list_backups
            ;;
        s)
            if [ "$BACKUP_DATABASE_DAILY" == "true" ]; then
                echo "Running daily database backup"
                backup_database "daily" "" # Daily backups do not use custom names
                clean_up_daily_backups
            else
                echo "Daily database backup is disabled"
            fi
            ;;
        n)
            CUSTOM_DB_NAME="$OPTARG"
            ;;
        *|h)
            usage
            ;;
    esac
done
