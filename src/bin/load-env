#!/bin/bash

snapctl() {
    if [ -z $SNAP ]; then
        sudo snap $1 immich-distribution $2
    else
        /usr/bin/snapctl $1 $2
    fi
}

LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu/libfswatch:$LD_LIBRARY_PATH"
LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu/pulseaudio:$LD_LIBRARY_PATH"
LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu/libheif:$LD_LIBRARY_PATH"
LD_LIBRARY_PATH="$SNAP/usr/local/pgsql/lib:$LD_LIBRARY_PATH"

export LD_LIBRARY_PATH

export PATH="$SNAP/usr/local/bin:$PATH"
export PGDATA="$SNAP_COMMON/pgsql/data"

export LC_ALL="C"
export LC_CTYPE="C"

# I think NODE_ENV is not used by Immich anymore, keep it for now
export NODE_ENV="production"

export DB_HOSTNAME="127.0.0.1"
export DB_USERNAME="postgres"
export DB_PASSWORD="$(snapctl get database-password)"
export DB_DATABASE_NAME="immich"

export REDIS_HOSTNAME="127.0.0.1"

export IMMICH_ENV="production"
export IMMICH_PORT=3001
export IMMICH_SERVER_URL="http://127.0.0.1:3001" # Not used by Immich anymore, but still used by Immich Distribution
export IMMICH_HOST="127.0.0.1"
export IMMICH_MACHINE_LEARNING_URL="http://127.0.0.1:3003"
export IMMICH_BUILD_DATA="$SNAP/var/lib/immich/build" # Contains www, geodata and build-lock.json
export IMMICH_MEDIA_LOCATION="$SNAP_COMMON/upload"
export IMMICH_API_METRICS_PORT=8081
export IMMICH_MICROSERVICES_METRICS_PORT=8082
export IMMICH_TELEMETRY_INCLUDE="$(snapctl get metrics-telemetry-include)"
export IMMICH_TELEMETRY_EXCLUDE="$(snapctl get metrics-telemetry-exclude)"

export IMMICH_THIRD_PARTY_SOURCE_URL="https://github.com/nsg/immich-distribution"
export IMMICH_THIRD_PARTY_BUG_FEATURE_URL="https://github.com/nsg/immich-distribution/issues"
export IMMICH_THIRD_PARTY_DOCUMENTATION_URL="https://immich-distribution.nsg.cc"
export IMMICH_THIRD_PARTY_SUPPORT_URL="https://github.com/nsg/immich-distribution/issues"

export MACHINE_LEARNING_LOG_LEVEL="warning"
export MACHINE_LEARNING_IP="127.0.0.1"
export MACHINE_LEARNING_CACHE_FOLDER="$SNAP_COMMON/cache"
export MACHINE_LEARNING_HOST="127.0.0.1"
export MACHINE_LEARNING_PORT=3003
export MACHINE_LEARNING_WORKERS=1
export MACHINE_LEARNING_WORKER_TIMEOUT=120
export MACHINE_LEARNING_KEEP_ALIVE_TIMEOUT=2
export MACHINE_LEARNING_GRACEFUL_TIMEOUT=10
export TRANSFORMERS_CACHE="$MACHINE_LEARNING_CACHE_FOLDER"

export ACME_PORT="$(snapctl get acme-port)"
export ACME_DOMAIN="$(snapctl get acme-domain)"
export ACME_EMAIL="$(snapctl get acme-email)"
export ACME_STAGING="$(snapctl get acme-staging)"
export ACME_CHALLENGE_TYPE="$(snapctl get acme-challenge-type)"
export ACME_CONFIG_PATH="$SNAP_COMMON/acme"

export HAPROXY_CONF_FILE="haproxy.cfg"
export HTTPS_ENABLED="$(snapctl get https-enabled)"
export HTTP_ENABLED="$(snapctl get http-enabled)"

# Set frontend states based on enabled/disabled settings
if [ "x$HTTP_ENABLED" == "xfalse" ]; then
    export HAPROXY_HTTP_FRONTEND_STATE="disabled"
else
    export HAPROXY_HTTP_FRONTEND_STATE=""
fi

if [ "x$HTTPS_ENABLED" == "xtrue" ]; then
    export HAPROXY_HTTPS_FRONTEND_STATE=""
else
    export HAPROXY_HTTPS_FRONTEND_STATE="disabled"
fi

export HAPROXY_HTTP_BIND="$(snapctl get haproxy-http-bind)"
export HAPROXY_HTTPS_BIND="$(snapctl get haproxy-https-bind)"

export SYNC_DELETE_THRESHOLD="$(snapctl get sync-delete-threshold)"
export BACKUP_DATABASE_DAILY="$(snapctl get backup-database-daily)"

NODE_OPTIONS_VALUE="$(snapctl get node-options)"
if [ -n "$NODE_OPTIONS_VALUE" ]; then
    export NODE_OPTIONS="$NODE_OPTIONS_VALUE"
fi

drop_privileges() {
    $SNAP/usr/bin/setpriv \
        --clear-groups \
        --reuid snap_daemon \
        --regid snap_daemon \
        -- $@
}

immich_server_ready() {
    curl -s "$IMMICH_SERVER_URL/server-info/ping" -o /dev/null
}

immich_api() {
    curl -s "$IMMICH_SERVER_URL/$2" -H 'Accept: application/json' -H "x-api-key: $1"
}

user_id() {
    immich_api "$1" user/me | jq -r .id
}

root_check() {
    if [ x$UID != x0 ]; then
        echo "You need to run this command as root (with sudo)"
        exit 1
    fi
}

banner() {
    echo "!!! NOTE: This is Immich Distribution. This is an unofficial" \
        "community packaged distribution of the Immich software. For support," \
        "or more information see https://github.com/nsg/immich-distribution"
}

lego_staging_string() {
    [ x$ACME_STAGING == xtrue ] && echo "--server=https://acme-staging-v02.api.letsencrypt.org/directory"
}

sync_enabled() {
    snapctl get sync-enabled | grep -q "true"
}

query_db() {
    if [ -z $SNAP ]; then
        cat - | sudo immich-distribution.psql -d immich $@
    else
        cat - | $SNAP/bin/psql -d immich $@
    fi
}
