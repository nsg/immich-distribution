name: immich-distribution
title: Immich Distribution
version: "v1.142.1"
base: core22
grade: stable
confinement: strict
architectures:
  - build-on: [amd64]
    build-for: [amd64]
assumes:
  - command-chain
website: https://immich-distribution.nsg.cc
contact: https://github.com/nsg/immich-distribution/issues
source-code: https://github.com/nsg/immich-distribution
issues: https://github.com/nsg/immich-distribution/issues
summary: Community-packaged Immich for easy self-hosted photo and video management.
description: |
  This is a community-packaged Immich distribution, conveniently bundled as a snap package.
  Inspired by the official Immich images, this package offers an experience similar to the Docker-based installation, though with some differences tailored for the snap environment.

  Immich Distribution delivers the core Immich software with a focus on ease of use. A simple `snap install immich-distribution` on a publicly accessible server aims to provide a fully functional Immich instance. While customization options are streamlined, non-intrusive extra tools are included and can be optionally utilized.

  For important updates, news, and release notes, please keep track of our announcements at https://immich-distribution.nsg.cc/news/.

  **Resources**

  * https://immich-distribution.nsg.cc
  * https://github.com/nsg/immich-distribution

  Immich Distribution is an independent community project. It is not affiliated with the upstream Immich project, its developers, or FUTO. For further details, please consult the resources linked above.

  For support, please open an issue on our GitHub repository.

system-usernames:
  snap_daemon: shared

layout:
  $SNAP/usr/src/app/upload:
    symlink: $SNAP_COMMON/upload
  /usr/lib/x86_64-linux-gnu/libheif:
    symlink: $SNAP/usr/lib/x86_64-linux-gnu/libheif
  /usr/lib/vips-modules-8.16:
    symlink: $SNAP/usr/lib/vips-modules-8.16
  /usr/etc/ImageMagick-7:
    symlink: $SNAP/usr/etc/ImageMagick-7
  /usr/lib/ImageMagick-7.1.1:
    symlink: $SNAP/usr/lib/ImageMagick-7.1.1

hooks:
  configure:
    plugs:
      - network

apps:
  psql:
    command: bin/psql
    plugs:
      - network

  postgres:
    command: bin/postgres
    daemon: simple
    restart-delay: 10s
    plugs:
      - network-bind

  redis-server:
    command: bin/redis-server $SNAP/etc/redis.conf
    daemon: simple
    restart-delay: 10s
    plugs:
      - network-bind

  immich-server:
    command: bin/immich-server
    daemon: simple
    restart-delay: 10s
    after:
      - redis-server
      - postgres
    plugs:
      - network-bind
      - network

  debug:
    command: bin/debug
    plugs:
      - network-bind
      - network

  immich-admin:
    command: bin/immich-admin
    plugs:
      - network

  immich-machine-learning:
    command: bin/immich-machine-learning
    daemon: simple
    plugs:
      - network-bind
      - network

  haproxy:
    command: bin/haproxy-wrapper
    daemon: simple
    plugs:
      - network-bind
      - network

  sync-service:
    command: bin/sync-service.sh
    daemon: simple
    restart-delay: 10s
    after:
      - immich-server
    plugs:
      - network

  manager:
    command: bin/manager
    daemon: simple
    restart-delay: 60s
    timer: "00:00-24:00/24"
    plugs:
      - network
    after:
      - immich-server

  manager-bootstrap:
    command: bin/manager bootstrap
    daemon: simple
    restart-delay: 2m
    plugs:
      - network
    after:
      - immich-server

  backup:
    command: bin/backup

  restore:
    command: bin/restore

  notification:
    command: bin/notification
    plugs:
      - network

  lets-encrypt:
    command: bin/acme-init
    plugs:
      - network
      - network-bind

  acme:
    command: bin/acme-service
    daemon: simple
    restart-delay: 60s
    timer: "00:00-24:00/2"
    plugs:
      - network
      - network-bind

  backup-service:
    command: bin/backup -s
    daemon: simple
    restart-delay: 60s
    timer: "01:00"

package-repositories:
  - type: apt
    url: https://nsg.github.io/aptly/deb
    key-id: 5C1D32DC907B26F2BDD7EE8E0D00DE0E5C61B36E
    path: /

parts:
  server:
    plugin: nil
    source: https://github.com/immich-app/immich.git
    source-tag: v1.142.1
    build-environment:
      - SHARP_FORCE_GLOBAL_LIBVIPS: "true"
      - COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
      - CI: "1"
    override-build: |
      craftctl default
      
      npm install --global corepack@latest
      corepack enable pnpm

      cd server

      # Apply patches
      patch -p0 < $CRAFT_STAGE/pg_dumpall-path.path
      git apply -p1 $CRAFT_STAGE/commands__create-admin-api-key.command.ts.patch
      git apply -p1 $CRAFT_STAGE/commands__index.ts.patch
      git apply -p1 $CRAFT_STAGE/commands__media-location.command.ts.patch
      git apply -p1 $CRAFT_STAGE/services__cli.service.ts.patch
      git apply -p1 $CRAFT_STAGE/services__notification-admin.service.ts.patch

      mkdir -p ${CRAFT_PART_INSTALL}/usr/src/app

      pnpm --filter immich --frozen-lockfile build
      pnpm --filter immich --frozen-lockfile --prod --no-optional deploy ${CRAFT_PART_INSTALL}/usr/src/app

      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/.nvmrc
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/.prettierignore
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/.prettierrc
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/Dockerfile
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/nest-cli.json
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/pnpm-lock.yaml
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/test
      rm -rf ${CRAFT_PART_INSTALL}/usr/src/app/bin

    build-packages:
      - git
      - pkg-config

      # Sharp needs to be rebuilt and linked against the system libvips, which requires installing various development packages.
      # This list is based on the list of packages required to build libvips from source, some packages may be unnecessary but
      # these packages are not included in the final snap package anyway so it doesn't matter.
      - libfftw3-dev
      - libopenexr-dev
      - libgsf-1-dev
      - libglib2.0-dev
      - liborc-dev
      - libopenslide-dev
      - libmatio-dev
      - libwebp-dev
      - libjpeg-turbo8-dev
      - libexpat1-dev
      - libexif-dev
      - libtiff5-dev
      - libcfitsio-dev
      - libpoppler-glib-dev
      - librsvg2-dev
      - libpango1.0-dev
      - libopenjp2-7-dev
      - libimagequant-dev
      - liblcms2-dev
    build-snaps:
      - node/20/stable
    stage-snaps:
      - node/20/stable
    stage-packages:
      - nsg-redis
      - nsg-libvips
      - nsg-postgres
      - nsg-pgvector
      - nsg-vectorchord
    after:
      - jellyfin-ffmpeg
      - parts-server-patches

  parts-server-scripts:
    plugin: dump
    source: parts/immich-server/scripts

  parts-server-patches:
    plugin: dump
    source: parts/immich-server/patches
    prime:
      - -*

  web:
    plugin: nil
    source: https://github.com/immich-app/immich.git
    source-tag: v1.142.1
    build-environment:
      - COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
      - CI: "1"
    override-build: |

      npm install --global corepack@latest
      corepack enable pnpm

      cd web

      pnpm --filter @immich/sdk --filter immich-web --frozen-lockfile --force install
      pnpm --filter @immich/sdk --filter immich-web build

      # Install the resulting web application
      mkdir -p ${CRAFT_PART_INSTALL}/var/lib/immich/build
      cp -r build ${CRAFT_PART_INSTALL}/var/lib/immich/build/www
    build-snaps:
      - node/20/stable

  machine-learning:
    plugin: uv
    source: https://github.com/immich-app/immich.git
    source-tag: v1.142.1
    source-subdir: machine-learning
    uv-extras:
      - cpu
    override-build: |
      craftctl default

      cd machine-learning
      mkdir -p ${CRAFT_PART_INSTALL}/etc
      cp immich_ml/log_conf.json ${CRAFT_PART_INSTALL}/etc

    stage-packages:
      - nsg-mimalloc
    after: [uv-deps]

  uv-deps:
    plugin: nil
    override-build: |
      curl -sL https://github.com/astral-sh/uv/releases/download/0.6.11/uv-x86_64-unknown-linux-gnu.tar.gz -o uv.tar.gz
      echo "c19b3be7ac26f8b211f7a5f07f01a77fd4d2b6205ff257790770a585f7f5bda4  uv.tar.gz" | sha256sum -c
      tar -xf uv.tar.gz
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      mv uv-x86_64-unknown-linux-gnu/* $CRAFT_PART_INSTALL/usr/bin
    build-packages:
      - coreutils

  debug:
    plugin: dump
    source: parts/debug

  scripts:
    source: src
    plugin: dump
    stage-packages:
      - util-linux
      - fswatch
      - curl
      - jq
      - xz-utils
      - nsg-haproxy
      - nsg-lego

  sync:
    plugin: uv
    source: parts/sync
    build-environment:
      - UV_PROJECT_ENVIRONMENT: "${CRAFT_PART_INSTALL}/sync"
    after: [uv-deps]
    stage:
      - sync

  geodata:
    # Download geodata from geonames.org, based Immich Server base image
    # https://github.com/immich-app/base-images/blob/main/server/Dockerfile
    plugin: dump
    source: https://download.geonames.org/export/dump/cities500.zip
    override-build: |
      # Download cities500.zip and unpack it as cities500.txt
      craftctl default

      # Create folder structure and write geodata-date.txt
      mkdir -p $CRAFT_PART_INSTALL/var/lib/immich/build/geodata
      date --iso-8601=seconds | tr -d "\n" > $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/geodata-date.txt

      # Download admin1CodesASCII.txt and admin2Codes.txt and move cities500.txt to geodata
      mv $CRAFT_PART_INSTALL/cities500.txt $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/cities500.txt
      curl https://download.geonames.org/export/dump/admin1CodesASCII.txt -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/admin1CodesASCII.txt
      curl https://download.geonames.org/export/dump/admin2Codes.txt -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/admin2Codes.txt
      curl https://raw.githubusercontent.com/nvkelso/natural-earth-vector/v5.1.2/geojson/ne_10m_admin_0_countries.geojson -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/ne_10m_admin_0_countries.geojson
    build-packages:
      - curl

  manager:
    plugin: dump
    source: parts/manager

  pgvecto-rs:
    source: https://github.com/tensorchord/pgvecto.rs/releases/download/v0.2.0/vectors-pg15_0.2.0_amd64.deb
    plugin: dump
    organize:
      usr/share/postgresql/15/extension: usr/local/pgsql/share/extension
      usr/lib/postgresql/15/lib: usr/local/pgsql/lib
    stage:
      - -usr/share/doc

  jellyfin-ffmpeg:
    source: https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v7.0.2-7/jellyfin-ffmpeg7_7.0.2-7-jammy_amd64.deb
    plugin: dump
    source-checksum: sha256/f116e06281e5dc96a4b1d59a57aa39c1601deb01e9ed023d1741574886cc9432
    organize:
      usr/lib/jellyfin-ffmpeg/lib: usr/lib
      usr/lib/jellyfin-ffmpeg/share: usr/share
      usr/lib/jellyfin-ffmpeg/ffprobe: usr/bin/ffprobe
      usr/lib/jellyfin-ffmpeg/ffmpeg: usr/bin/ffmpeg
      usr/lib/jellyfin-ffmpeg/vainfo: usr/bin/vainfo
    stage-packages:
      - libbluray2
      - libopenmpt0
      - libpciaccess0
      - libllvm15
      - libx11-xcb1
      - libxcb-dri2-0
      - libxcb-dri3-0
      - libxcb-present0
      - libxcb-sync1
      - libxcb-xfixes0
      - libxcb-randr0
      - libxshmfence1
      - libopencl1
      - libmp3lame0
      - libopus0
      - libtheora0
      - libvorbis0a
      - libvorbisenc2
      - libvpx7
      - libx264-163
      - libx265-199
      - libzvbi0
