name: immich-distribution
title: Immich Distribution
version: "v1.125.1"
base: core22
grade: stable
confinement: strict
architectures:
  - build-on: [amd64]
    build-for: [amd64]
assumes:
  - command-chain
website: https://immich-distribution.nsg.cc
contact: https://github.com/nsg/immich-distribution/issues
source-code: https://github.com/nsg/immich-distribution
issues: https://github.com/nsg/immich-distribution/issues
summary: This is an Immich Distribution packaged by the community.
description: |
  This is an Immich Distribution packaged inside a snap package.
  The package is inspired by the official Immich images.
  It will be similar but not identical to the official
  Docker-based installation.

  Immich Distribution ships the same software but with limited customization.
  The main focus is ease of use; a simple `snap install immich-distribution` on a publicly available server should yield a fully working Immich installation.
  Non-intrusive extra tools are included, which can be ignored if not needed.

  **Resources**

  * https://immich-distribution.nsg.cc
  * https://github.com/nsg/immich-distribution

  Immich Distribution is an independent community project that packages the software in a snap package.
  This project is not affiliated with the upstream Immich project, its developers, or FUTO.
  For more information, please refer to the links above.

  For support, please open an issue on our GitHub page.

system-usernames:
  snap_daemon: shared

layout:
  $SNAP/usr/src/app/upload:
    symlink: $SNAP_COMMON/upload
  /usr/lib/x86_64-linux-gnu/libheif:
    symlink: $SNAP/usr/lib/x86_64-linux-gnu/libheif
  /usr/lib/vips-modules-8.15:
    symlink: $SNAP/usr/lib/vips-modules-8.15
  /usr/etc/ImageMagick-7:
    symlink: $SNAP/usr/etc/ImageMagick-7
  /usr/lib/ImageMagick-7.1.1:
    symlink: $SNAP/usr/lib/ImageMagick-7.1.1

hooks:
  configure:
    plugs:
      - network

apps:
  psql:
    command: bin/psql
    plugs:
      - network

  postgres:
    command: bin/postgres
    daemon: simple
    restart-delay: 10s
    plugs:
      - network-bind

  redis-server:
    command: bin/redis-server $SNAP/etc/redis.conf
    daemon: simple
    restart-delay: 10s
    plugs:
      - network-bind

  immich-server:
    command: bin/immich-server
    daemon: simple
    restart-delay: 10s
    after:
      - redis-server
      - postgres
    plugs:
      - network-bind
      - network

  debug:
    command: bin/debug
    plugs:
      - network-bind
      - network

  immich-admin:
    command: bin/immich-admin
    plugs:
      - network

  immich-machine-learning:
    command: bin/immich-machine-learning
    daemon: simple
    plugs:
      - network-bind
      - network

  haproxy:
    command: bin/haproxy-wrapper
    daemon: simple
    plugs:
      - network-bind
      - network

  sync-service:
    command: bin/sync-service.sh
    daemon: simple
    restart-delay: 10s
    after:
      - immich-server
    plugs:
      - network

  manager:
    command: bin/manager
    daemon: simple
    restart-delay: 60s
    after:
      - immich-server

  backup:
    command: bin/backup

  restore:
    command: bin/restore

  lets-encrypt:
    command: bin/acme-init
    plugs:
      - network
      - network-bind

  acme:
    command: bin/acme-service
    daemon: simple
    restart-delay: 60s
    timer: "00:00-24:00/2"
    plugs:
      - network
      - network-bind

  backup-service:
    command: bin/backup -s
    daemon: simple
    restart-delay: 60s
    timer: "01:00"

package-repositories:
  - type: apt
    url: http://apt.nsg.cc
    key-id: F57612E2E6C4A0CAA9695C839C471A5B8FA0B5E3
    suites: [jammy]
    components: [main]

parts:
  server:
    plugin: nil
    source: https://github.com/immich-app/immich.git
    source-tag: v1.125.1
    override-build: |
      craftctl default

      cd server

      SHARP_VERSION=0.33.0

      if [[ "$(node -p "require('./package.json').dependencies.sharp")" == "^$SHARP_VERSION" ]]; then
        echo "Sharp version is correct"
      else
        echo "Sharp version is incorrect"
        exit 1
      fi

      # needed for sharp to build from source
      npm install --save node-addon-api node-gyp
      npm install --save sharp@$SHARP_VERSION

      # Verify that sharp thinks it should use the global libvips
      (
        cd node_modules/sharp/src
        if [[ "$(node -p "Boolean(require('../lib/libvips').useGlobalLibvips()).toString()")" != "true" ]]; then
          echo "Error Sharp useGlobalLibvips returned false. Global libvips is not used."
          exit 1
        fi
      )

      npm ci
      npm run build
      npm prune --omit=dev #--omit=optional

      # Verify that sharp was built from source, and that the binary is still present (after ci & prune)
      if [[ ! -e node_modules/sharp/src/build/Release/sharp-linux-x64.node ]]; then
        echo "Sharp was not built from source, missing sharp-linux-x64.node"
        exit 1
      fi

      mkdir -p ${CRAFT_PART_INSTALL}/usr/src/app
      cp -r node_modules ${CRAFT_PART_INSTALL}/usr/src/app
      cp -r dist ${CRAFT_PART_INSTALL}/usr/src/app
      cp -r bin ${CRAFT_PART_INSTALL}/usr/src/app
      cp -r resources ${CRAFT_PART_INSTALL}/usr/src/app
      cp package.json package-lock.json ${CRAFT_PART_INSTALL}/usr/src/app

    build-packages:
      - git
      - pkg-config

      # Sharp needs to be rebuilt and linked against the system libvips, which requires installing various development packages.
      # This list is based on the list of packages required to build libvips from source, some packages may be unnecessary but
      # these packages are not included in the final snap package anyway so it doesn't matter.
      - libfftw3-dev
      - libopenexr-dev
      - libgsf-1-dev
      - libglib2.0-dev
      - liborc-dev
      - libopenslide-dev
      - libmatio-dev
      - libwebp-dev
      - libjpeg-turbo8-dev
      - libexpat1-dev
      - libexif-dev
      - libtiff5-dev
      - libcfitsio-dev
      - libpoppler-glib-dev
      - librsvg2-dev
      - libpango1.0-dev
      - libopenjp2-7-dev
      - libimagequant-dev
      - liblcms2-dev
    build-snaps:
      - node/20/stable
    stage-snaps:
      - node/20/stable
    stage-packages:
      - nsg-redis
      - nsg-postgres
      - nsg-libvips
    after:
      - jellyfin-ffmpeg

  parts-server-scripts:
    plugin: dump
    source: parts/immich-server/scripts

  web:
    plugin: nil
    source: https://github.com/immich-app/immich.git
    source-tag: v1.125.1
    override-build: |
      # Build typescript-sdk, this is included by cli and web
      cd open-api/typescript-sdk
      npm ci
      npm run build

      # Build Immich Web
      cd ../../web
      npm ci
      npm run build

      # Install the resulting web application
      mkdir -p ${CRAFT_PART_INSTALL}/var/lib/immich/build
      cp -r build ${CRAFT_PART_INSTALL}/var/lib/immich/build/www
    build-snaps:
      - node/20/stable

  machine-learning:
    plugin: make
    source: parts/machine-learning
    build-packages:
      - git
      - execstack
      - nsg-python
    stage-packages:
      - nsg-python
      - nsg-mimalloc

  debug:
    plugin: dump
    source: parts/debug

  scripts:
    source: src
    plugin: dump
    stage-packages:
      - util-linux
      - fswatch
      - curl
      - jq
      - xz-utils
      - nsg-haproxy
      - nsg-lego

  sync:
    plugin: make
    source: parts/sync
    build-packages:
      - nsg-python
    stage-packages:
      - nsg-python

  geodata:
    # Download geodata from geonames.org, based Immich Server base image
    # https://github.com/immich-app/base-images/blob/main/server/Dockerfile
    plugin: dump
    source: https://download.geonames.org/export/dump/cities500.zip
    override-build: |
      # Download cities500.zip and unpack it as cities500.txt
      craftctl default

      # Create folder structure and write geodata-date.txt
      mkdir -p $CRAFT_PART_INSTALL/var/lib/immich/build/geodata
      date --iso-8601=seconds | tr -d "\n" > $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/geodata-date.txt

      # Download admin1CodesASCII.txt and admin2Codes.txt and move cities500.txt to geodata
      mv $CRAFT_PART_INSTALL/cities500.txt $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/cities500.txt
      curl https://download.geonames.org/export/dump/admin1CodesASCII.txt -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/admin1CodesASCII.txt
      curl https://download.geonames.org/export/dump/admin2Codes.txt -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/admin2Codes.txt
      curl https://raw.githubusercontent.com/nvkelso/natural-earth-vector/v5.1.2/geojson/ne_10m_admin_0_countries.geojson -o $CRAFT_PART_INSTALL/var/lib/immich/build/geodata/ne_10m_admin_0_countries.geojson
    build-packages:
      - curl

  manager:
    plugin: dump
    source: parts/manager

  pgvecto-rs:
    source: https://github.com/tensorchord/pgvecto.rs/releases/download/v0.2.0/vectors-pg15_0.2.0_amd64.deb
    plugin: dump
    organize:
      usr/share/postgresql/15/extension: usr/local/pgsql/share/extension
      usr/lib/postgresql/15/lib: usr/local/pgsql/lib
    stage:
      - -usr/share/doc

  jellyfin-ffmpeg:
    source: https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v7.0.2-7/jellyfin-ffmpeg7_7.0.2-7-jammy_amd64.deb
    plugin: dump
    source-checksum: sha256/f116e06281e5dc96a4b1d59a57aa39c1601deb01e9ed023d1741574886cc9432
    organize:
      usr/lib/jellyfin-ffmpeg/lib: usr/lib
      usr/lib/jellyfin-ffmpeg/share: usr/share
      usr/lib/jellyfin-ffmpeg/ffprobe: usr/bin/ffprobe
      usr/lib/jellyfin-ffmpeg/ffmpeg: usr/bin/ffmpeg
      usr/lib/jellyfin-ffmpeg/vainfo: usr/bin/vainfo
    stage-packages:
      - libbluray2
      - libopenmpt0
      - libpciaccess0
      - libllvm15
      - libx11-xcb1
      - libxcb-dri2-0
      - libxcb-dri3-0
      - libxcb-present0
      - libxcb-sync1
      - libxcb-xfixes0
      - libxcb-randr0
      - libxshmfence1
      - libopencl1
      - libmp3lame0
      - libopus0
      - libtheora0
      - libvorbis0a
      - libvorbisenc2
      - libvpx7
      - libx264-163
      - libzvbi0
