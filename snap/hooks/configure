#!/bin/bash

random_string() {
    cat /dev/urandom | tr -dc '[:alpha:]' | fold -w ${1:-20} | head -n 1
}

free_port() {
    for port in $(seq 34000 36000); do
        (echo > /dev/tcp/0.0.0.0/$port) >/dev/null 2>&1 || { echo "$port"; break; }
    done
}

# Clean up old reverse geocoding data. This information is stored in Postgres since Immich v1.89
rm -rf $SNAP_COMMON/reverse-geocoding-dump

# Clean up old typesense data. This information is stored in Postgres since Immich v1.91
rm -rf $SNAP_COMMON/typesense
snapctl unset typesense-key

mkdir -p $SNAP_COMMON/{pgsql,redis,reverse-geocoding-dump,upload,sync,backups,acme,cache}
chown snap_daemon:snap_daemon $SNAP_COMMON/pgsql

if [[ $(snapctl get database-password) == "" ]]; then
    snapctl set database-password="$(random_string)"
fi

if [[ $(snapctl get typesense-key) == "" ]]; then
    snapctl set typesense-key="$(random_string)"
fi

if [[ $(snapctl get haproxy-http-bind) == "" ]]; then
    snapctl set haproxy-http-bind="*:80"
fi

if [[ $(snapctl get haproxy-https-bind) == "" ]]; then
    snapctl set haproxy-https-bind="*:443"
fi

if [[ $(snapctl get acme-port) == "" ]]; then
    snapctl set acme-port="$(free_port)"
fi

if [[ $(snapctl get manager-migrations-version) == "" ]]; then
    snapctl set manager-migrations-version="0"
fi

if [[ $(snapctl get sync-delete-threshold) == "" ]]; then
    snapctl set sync-delete-threshold="300"
fi

if [[ $(snapctl get metrics-enabled) == "" ]]; then
    snapctl set metrics-enabled="false"
fi

if [[ $(snapctl get metrics-api-enabled) == "" ]]; then
    snapctl set metrics-api-enabled="false"
fi

if [[ $(snapctl get metrics-host-enabled) == "" ]]; then
    snapctl set metrics-host-enabled="false"
fi

if [[ $(snapctl get metrics-io-enabled) == "" ]]; then
    snapctl set metrics-io-enabled="false"
fi

if [[ $(snapctl get metrics-job-enabled) == "" ]]; then
    snapctl set metrics-job-enabled="false"
fi

# Restart services
snapctl restart immich-distribution.postgres
snapctl restart immich-distribution.haproxy
snapctl restart immich-distribution.sync-service
