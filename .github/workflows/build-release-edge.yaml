name: Build and release snap package to edge channel

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'LICENSE'

  workflow_dispatch:

jobs:
  haproxy:
    name: Build HAProxy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/haproxy/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/haproxy

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: haproxy
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  python:
    name: Build Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/python/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/python

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: python
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  lego:
    name: Build lego
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/lego/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/lego

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: lego
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  libvips:
    name: Build libvips
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/libvips/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/libvips

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: libvips
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  mimalloc:
    name: Build mimalloc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/mimalloc/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/mimalloc

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: mimalloc
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  node:
    name: Download node
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/node/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/node

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: node
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  postgres:
    name: Build postgres
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/postgres/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/postgres

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: postgres
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  redis:
    name: Build redis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/redis/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/redis

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: redis
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  typesense:
    name: Download typesense
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache
        with:
          key: ${{ hashFiles('dependencies/typesense/**') }}
          path: |
            dependencies/**/*.snap

      - name: Build snap package
        uses: snapcore/action-build@v1
        if: steps.cache.outputs.cache-hit != 'true'
        id: build
        with:
          path: dependencies/typesense

      - name: Save snap package as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: typesense
          if-no-files-found: error
          path: |
            dependencies/**/*.snap

  prepare-dependencies:
    name: Prepare dependencies
    runs-on: ubuntu-latest
    needs:
      - haproxy
      - python
      - lego
      - libvips
      - mimalloc
      - node
      - postgres
      - redis
      - typesense

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: dependencies/artifacts

      - name: List snap dependency artifacts
        run: |
          find dependencies

      - name: Extract and validate snap packages
        run: |
          find dependencies/artifacts
          mkdir -p workdir
          for artifact in $(cd dependencies/artifacts; ls -1); do

            unsquashfs -d workdir/$artifact dependencies/artifacts/$artifact/$artifact/*.snap

            # Clean up snap package
            rm -rf workdir/$artifact/meta
            rm -rf workdir/$artifact/snap

            # Make sure we have a stage directory
            mkdir -p workdir/stage

            # Check for conflicting files
            for file in $(cd workdir/$artifact; find . -type f -print); do
              if [ -f workdir/stage/$file ]; then
                echo "File $file already exists in stage directory, compare files hashes"
                if [ "$(sha256sum workdir/$artifact/$file | awk '{print $1}')" != "$(sha256sum workdir/stage/$file | awk '{print $1}')" ]; then
                  echo "File $file has different content in stage directory, aborting"
                  exit 1
                fi
              fi
            done

            # Stage files
            rsync -av workdir/$artifact/* workdir/stage/
            rm -ef workdir/$artifact
          done

          mv workdir/stage/* workdir
          rmdir workdir/stage

      - name: Compress workdir
        run: |
          tar -czf workdir.tar.gz workdir

      - name: List workdir
        run: |
          find workdir

      - name: Save workdir
        uses: actions/upload-artifact@v3
        with:
          name: workdir
          if-no-files-found: error
          path: |
            workdir.tar.gz
  
  build:
    name: Build, Test and Release Snap Package
    runs-on: ubuntu-latest
    needs: prepare-dependencies

    services:
      selenium:
        image: selenium/standalone-chrome:latest
        options: --shm-size=2gb
        ports:
          - 4444:4444

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: workdir

      - name: Extract workdir
        run: |
          tar -xzf workdir.tar.gz

      - name: Debug
        run: |
          pwd
          find .

      - name: Build snap package
        uses: snapcore/action-build@v1
        id: build

      - name: TEST | Install package
        run: sudo snap install --dangerous ${{ steps.build.outputs.snap }}

      - name: TEST | Install requirements
        run: pip install -r tests/requirements.txt

      - name: TEST | Run Selenium Tests
        run: make ci -C tests

      - name: Upload snap package to edge channel
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.STORE_LOGIN }}
        with:
          snap: ${{ steps.build.outputs.snap }}
          release: edge
